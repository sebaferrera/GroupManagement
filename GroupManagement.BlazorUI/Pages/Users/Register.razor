@page "/Register"
@using GroupManagement.BlazorUI.Model
@using GroupManagement.BlazorUI.Contracts

@inject IAuthenticationService _authService
@inject NavigationManager _navMan;

    <div class="card">
        <h3 class="card-title">Register Now</h3>
        @if (isFailed)
        {
            <div class="alert alert-danger">
                @foreach (var error in AuthResult.RegistrationErrors)
                {
                    <p>@error</p>
                }

            </div>
        }
        <div class="card-body">
            <EditForm Model="RegModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="email">Email Address</label>
                    <InputText Id="email" class="form-control" @bind-Value="RegModel.EmailAddress" />
                    <ValidationMessage For="@(() => RegModel.EmailAddress)" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText Id="password" type="password" class="form-control" @bind-Value="RegModel.Password" />
                    <ValidationMessage For="@(() => RegModel.Password)" />
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText Id="confirmPassword" type="password" class="form-control" @bind-Value="RegModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => RegModel.ConfirmPassword)" />
                </div>
                <button type="submit" class="btn btn-primary btn-block">Submit</button>
            </EditForm>
        </div>
    </div>

@code {
    private RegistrationModel RegModel = new RegistrationModel();
    private UserRegistrationResultDTO AuthResult;
    private bool isFailed = false;

    private async Task HandleRegistration()
    {
        isFailed = false;
        AuthResult = await _authService.Register(RegModel);
        
        if (!AuthResult.HasRegistrationErrors)
        {
            _navMan.NavigateTo("/");
        }
        else
        {
            isFailed = true;
        }
    }
}
